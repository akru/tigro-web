// Connecting to ROS
// -----------------
var ros = new ROSLIB.Ros();

// If there is an error on the backend, an 'error' emit will be emitted.
ros.on('error', function(error) {
  console.log(error);
  $('#robot-name').css({color: '#996666'});
});

// Find out exactly when we made a connection.
ros.on('connection', function() {
  console.log('Connection made!');
  $('#robot-name').css({color: '#669966'});

  var c = document.getElementById("camera");
  fullscreenify(c);

  var rosTopic = new ROSLIB.Topic({
  ros : ros,
  name : 'image_raw/compressed',
  messageType : 'sensor_msgs/CompressedImage'
  });

rosTopic.subscribe(function(msg) {
//  console.log(msg.format);
//  rosTopic.unsubscribe();
  var ctx = c.getContext("2d");
  var serialImage = 'data:image/jpg;base64,' + msg.data;
  var image = new Image();
  image.src = serialImage;
  image.onload = function(){
    ctx.drawImage(image, 0, 0, image.width, image.height);
  };
//  console.log(serialImage);
});
var teleop = new KEYBOARDTELEOP.Teleop({
  ros : ros,
  topic : '/cmd_vel',
  scale : 0.1
});

// Create the main viewer.
var viewer = new ROS2D.Viewer({
  divID : 'nav',
  width : 300,
  height : 250
});

// Setup the nav client.
var nav = NAV2D.OccupancyGridClientNav({
  ros : ros,
  rootObject : viewer.scene,
  viewer : viewer,
  serverName : '/move_base'
});
});

/**
* fullscreenify()
* Stretch canvas to size of window.
*
* Zachary Johnson
* http://www.zachstronaut.com/
*
* See also: https://gist.github.com/1178522
*/

function fullscreenify(canvas) {
  var style = canvas.getAttribute('style') || '';
  window.addEventListener('resize', function () {resize(canvas);}, false);

  resize(canvas);

  function resize(canvas) {
    var scale = {x: 1, y: 1};
    scale.x = (window.innerWidth - 10) / canvas.width;
    scale.y = (window.innerHeight - 10) / canvas.height;
    if (scale.x < 1 || scale.y < 1) {
      scale = '1, 1';
    } else if (scale.x < scale.y) {
      scale = scale.x + ', ' + scale.x;
    } else {
      scale = scale.y + ', ' + scale.y;
    }
    canvas.setAttribute('style', style + ' ' + '-ms-transform-origin: center top; -webkit-transform-origin: center top; -moz-transform-origin: center top; -o-transform-origin: center top; transform-origin: center top; -ms-transform: scale(' + scale + '); -webkit-transform: scale3d(' + scale + ', 1); -moz-transform: scale(' + scale + '); -o-transform: scale(' + scale + '); transform: scale(' + scale + ');');
  }
}
